{"version":3,"sources":["types/Sort.ts","store/filter.ts","store/loading.ts","store/selectedTodo.ts","store/todos.ts","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Sort","initialState","query","selection","all","actions","type","payload","action","todo","todos","rootReducer","combineReducers","loading","filter","active","completed","selectedTodo","useAppSelector","useSelector","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","userId","dispatch","useDispatch","state","id","filters","includes","title","toLowerCase","className","map","classNames","onClick","SelectedAction","TodoFilter","onChange","event","value","FilteredActions","handleSelectChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","users","setUsers","useEffect","getUser","usersFromServer","href","email","name","App","setUserId","loadingActions","todosFromServer","todosActions","finally","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33be2ae1.chunk.js","sourcesContent":["export enum Sort {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import { FilterState } from '../types/FilterState';\nimport { Sort } from '../types/Sort';\n\nexport type NotFilteredAction = {\n  type: 'FILTER/NO',\n};\n\nexport type ActiveFilteredAction = {\n  type: 'FILTER/ACTIVE',\n};\n\nexport type CompletedFilteredAction = {\n  type: 'FILTER/COMPLETED',\n};\n\nexport type SetQueryFilteredAction = {\n  type: 'FILTER/QUERY',\n  payload: string,\n};\n\nexport type ClearQueryFilteredAction = {\n  type: 'FILTER/CLEAR',\n};\n\nexport type FilteredActions = (\n  NotFilteredAction\n  | ActiveFilteredAction\n  | CompletedFilteredAction\n  | SetQueryFilteredAction\n  | ClearQueryFilteredAction\n);\n\nconst initialState = {\n  query: '',\n  selection: Sort.all,\n};\n\nexport const filterReducer = (\n  filter: FilterState = initialState,\n  action: FilteredActions,\n) => {\n  switch (action.type) {\n    case 'FILTER/ACTIVE':\n      return {\n        ...filter,\n        selection: Sort.active,\n      };\n    case 'FILTER/COMPLETED':\n      return {\n        ...filter,\n        selection: Sort.completed,\n      };\n    case 'FILTER/NO':\n      return {\n        ...filter,\n        selection: Sort.all,\n      };\n    case 'FILTER/QUERY':\n      return {\n        ...filter,\n        query: action.payload,\n      };\n    case 'FILTER/CLEAR':\n      return {\n        ...filter,\n        query: '',\n      };\n    default:\n      return filter;\n  }\n};\n\nexport const actions = {\n  No: (): NotFilteredAction => ({ type: 'FILTER/NO' }),\n  Active: (): ActiveFilteredAction => ({ type: 'FILTER/ACTIVE' }),\n  Completed: (): CompletedFilteredAction => ({ type: 'FILTER/COMPLETED' }),\n  Query: (payload: string): SetQueryFilteredAction => (\n    { type: 'FILTER/QUERY', payload }\n  ),\n  QueryClear: (): ClearQueryFilteredAction => ({ type: 'FILTER/CLEAR' }),\n};\n","type StartLoadingAction = {\n  type: 'loading/start';\n};\n\ntype FinishLoadingAction = {\n  type: 'loading/finish';\n};\n\ntype LoadingAction = StartLoadingAction | FinishLoadingAction;\n\nexport const loadingReducer = (\n  loading = false,\n  action: LoadingAction,\n) => {\n  switch (action.type) {\n    case 'loading/start':\n      return true;\n\n    case 'loading/finish':\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport const actions = {\n  startLoading: (): StartLoadingAction => ({ type: 'loading/start' }),\n  finishLoading: (): FinishLoadingAction => ({ type: 'loading/finish' }),\n};\n","import { Todo } from '../types/Todo';\n\nexport type SelectTodo = {\n  type: 'TODO/SELECT'\n  payload: Todo,\n};\n\nexport type RemoveTodo = {\n  type: 'TODO/REMOVE'\n};\n\nexport type ChooseAction = SelectTodo | RemoveTodo;\n\nexport const selectReducer = (\n  todo: Todo | null = null,\n  action: ChooseAction,\n) => {\n  switch (action.type) {\n    case 'TODO/SELECT':\n      return action.payload;\n\n    case 'TODO/REMOVE':\n      return null;\n\n    default:\n      return todo;\n  }\n};\n\nexport const action = {\n  select: (todo: Todo): SelectTodo => ({\n    type: 'TODO/SELECT',\n    payload: todo,\n  }),\n\n  remove: (): RemoveTodo => ({\n    type: 'TODO/REMOVE',\n  }),\n};\n","import { Todo } from '../types/Todo';\n\nexport type SetTodosAction = {\n  type: 'TODOS/SET',\n  payload: Todo[],\n};\n\nexport type TodosAction = SetTodosAction;\n\nexport const todosReducer = (\n  todos: Todo[] = [],\n  action: TodosAction,\n) => {\n  switch (action.type) {\n    case 'TODOS/SET':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport const actions = {\n  set: (todos: Todo[]): SetTodosAction => ({\n    type: 'TODOS/SET',\n    payload: todos,\n  }),\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { filterReducer } from './filter';\nimport { loadingReducer } from './loading';\nimport { selectReducer } from './selectedTodo';\nimport { todosReducer } from './todos';\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  loading: loadingReducer,\n  filter: filterReducer,\n  selectedTodo: selectReducer,\n});\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const store = createStore(rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ));\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../store';\nimport { action as SelectedAction } from '../../store/selectedTodo';\nimport { Sort } from '../../types/Sort';\n\ntype Props = {\n  userId: (value: React.SetStateAction<number>) => void\n\n};\n\nexport const TodoList: React.FC<Props> = ({\n  userId,\n}) => {\n  const dispatch = useDispatch();\n  const selectedTodo = useAppSelector(state => state.selectedTodo?.id);\n  const todos = useAppSelector(state => {\n    const filters = state.filter;\n\n    return state.todos.filter(todo => {\n      const includes = todo.title.toLowerCase()\n        .includes(filters.query.toLowerCase());\n\n      switch (filters.selection) {\n        case Sort.completed:\n          return todo.completed && includes;\n        case Sort.active:\n          return !todo.completed && includes;\n        default:\n          return includes;\n      }\n    });\n  });\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger',\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  dispatch(SelectedAction.select(todo));\n                  userId(todo.userId);\n                }}\n              >\n                <span className=\"icon\">\n\n                  <i className={classNames('far', {\n                    'fa-eye-slash': selectedTodo === todo.id,\n                    'fa-eye': !(selectedTodo === todo.id),\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n\n      </tbody>\n    </table>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../store';\nimport { actions as FilteredActions } from '../../store/filter';\nimport { Sort } from '../../types/Sort';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const handleSelectChange = (value: string) => {\n    switch (value) {\n      case Sort.active:\n        dispatch(FilteredActions.Active());\n        break;\n\n      case Sort.completed:\n        dispatch(FilteredActions.Completed());\n        break;\n\n      default:\n        dispatch(FilteredActions.No());\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={event => handleSelectChange(event.target.value as Sort)}\n          >\n            <option value={Sort.all}>All</option>\n            <option value={Sort.active}>Active</option>\n            <option value={Sort.completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            dispatch(FilteredActions.Query(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(FilteredActions.QueryClear())}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../store';\nimport { action as SelectedAction } from '../../store/selectedTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  userId: number;\n};\n\nexport const TodoModal: React.FC<Props> = ({ userId }) => {\n  const [users, setUsers] = useState<User>();\n  const dispatch = useDispatch();\n  const todo = useAppSelector(state => state.selectedTodo);\n\n  useEffect(() => {\n    getUser(userId).then(usersFromServer => {\n      setUsers(usersFromServer);\n    });\n  }, []);\n\n  return (todo && (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div\n        className=\"modal-background\"\n        onClick={() => {\n          dispatch(SelectedAction.remove());\n        }}\n\n      />\n\n      {!users ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(SelectedAction.remove());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n              {' by '}\n\n              <a href={`mailto:${users.email}`}>\n                {users?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  ));\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport './App.scss';\nimport { useAppSelector } from './store';\n\nimport '@fortawesome/@fortawesome/fontawesome-free/css/all.css';\nimport 'bulma/css/bulma.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './store/todos';\nimport { actions as loadingActions } from './store/loading';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const { loading, selectedTodo } = useAppSelector(state => state);\n  const [userId, setUserId] = useState(0);\n\n  useEffect(() => {\n    dispatch(loadingActions.startLoading());\n\n    getTodos()\n      .then(todosFromServer => dispatch(todosActions.set(todosFromServer)))\n      .finally(() => dispatch(loadingActions.finishLoading()));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <>\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n\n              <div className=\"block\">\n                {loading\n                  ? <Loader />\n                  : (\n                    <TodoList\n                      userId={user => setUserId(user)}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {selectedTodo && (\n          <TodoModal\n            userId={userId}\n          />\n        )}\n      </>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}